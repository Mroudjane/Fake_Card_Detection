# -*- coding: utf-8 -*-
"""Card Tampering Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10nwesJd_l8MFkaxG2ChT8ju5RGVMGx9q

#Card Tampering Detection

The purpose of this project is to detect whether a provided card is original or not. This projectcan help different organization detecting fake employees or customers ID Cards.

## Calculate structural similarity of original card (reference card) and user uploaded card.
"""

#importing packages
from skimage.metrics import structural_similarity
import imutils    #grab the contour of the image
import cv2        #computer vision
from PIL import Image   #dowload and visualize the image
import requests         #fetch the data from urls

"""create a folder to save the save the images"""

!mkdir card_tampering
!mkdir card_tampering/image

# open image and diplay them

original= Image.open(requests.get('https://www.thestatesman.com/wp-content/uploads/2019/07/pan-card.jpg', stream=True).raw)
tampered= Image.open(requests.get('https://assets1.cleartax-cdn.com/s/img/20170526124335/Pan4.png', stream=True).raw)

"""## Loading original and user provided images"""

#The file format of the source file.

print("Original image format : ", original.format)
print("Tampered image format : ", tampered.format)


#Image size in pixels (width, height)
print("Original image size in pixels : ", original.size)
print("Tampered image size in pixels : ", tampered.size)

"""#Resize images and convert format
Resize both images to the same size. Then, convert the tampered image to the original image format.
"""

original= original.resize((250, 160))
print(original.size)
original.save('card_tampering/image/original.png')

tampered= tampered.resize((250, 160))
print(tampered.size)
tampered.save('card_tampering/image/tampered.png')

"""to change tampered image format we just have to save the image with the right format. In the code section above we changed the original image format from JPEG to PNG.

## Display images
"""

#display original image
original

#display user given image
tampered

"""## Comparing the two cards"""

#load the two input images using cv2
original= cv2.imread('card_tampering/image/original.png')
tampered= cv2.imread('card_tampering/image/tampered.png')

"""### Reading the images using OpenCV.
During this step we will use a gray scale to simplify the comparison.
A coloured image is far more complex to understand by a machine because it has 3 channel (RGB) while the gray scale has only one channel.
"""

#convert to greyscale

original_gray = cv2.cvtColor(original, cv2.COLOR_BGR2GRAY)
tampered_gray = cv2.cvtColor(tampered, cv2.COLOR_BGR2GRAY)

original_gray

tampered_gray

#compute the stuctural similarity Index(SSIM) between the two images

(score, diff) = structural_similarity(original_gray, tampered_gray, full= True)

diff=(diff*255).astype("uint8") #uint8 mean the int is on 8bits ie between 0 and 255 this line of code ensures that the values of the difference are normalized.

print("SSIM: {}".format(score))

"""The SSIM help determine the coordinates of the differences between the images. The lower SSIM score is the lower is the similarity."""

#calculating threshold and contours

thresh = cv2.threshold(diff, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]
contours = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
contours = imutils.grab_contours(contours)

"""Threshold function in computer vision applies an adaptive threshold to the stored  image. It transforms the grayscale image into a binary image using the *cv2* function. 

We can only find and reteive contours on binary images. The contours is used for shape analysis and recognition. The *grab_contour* fucntion alows to "grab" the appropriate value of the contours.
"""

#loop over contours to create a bounding rectangle

for cont in contours :
    #apply contours on image
    (x, y, w, h) = cv2.boundingRect(cont)
    cv2.rectangle(original, (x, y), (x+w, y+h), (0, 0, 255), 2)
    cv2.rectangle(tampered, (x, y), (x+w, y+h), (0, 0, 255), 2)

"""Bounding rectangle alows to find the ratio of width and height of bounding rectangle of the object.After that we can draw bounding box where images are different."""

#display original image with contour

print('Original Format Image')
Image.fromarray(original)

#display tampered image with contour

print('tampered Format Image')
Image.fromarray(tampered)

"""Contour didn't help detect the difference between the two images."""

#Display difference image with black

print('Difference Image')
Image.fromarray(diff)

"""We can see here that there IS a difference between the two images. If there was no difference thare wouln't be any black portion on the image generated."""

#Display threshold image with White 

print('Threshold Image')
Image.fromarray(thresh)

"""We can see from this image that the threshold between the two images is very high as the there is a very big white areas in the generated image.

##summary

The Structural similarity of images helped in finding the difference between the shapes of original and user uploaded images.
Computing the threshold and contour alowed us to do shape analysis and shape recognition.

As SSIM is around 31% we can say with very good confidence that the user privided a fake ID.

Visualising the differences and similarities between imafes confirmed the theoritical findings.
"""
